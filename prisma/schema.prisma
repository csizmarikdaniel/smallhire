// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  role      String // ADMIN, WORKER, CUSTOMER
  worker    Worker?
  customer  Customer?
  admin     Admin?

  address   String
  city      String
  zipCode   String
  phone     String
}

model Admin {
  adminId        String      @id @default(cuid())
  user           User      @relation(fields: [adminId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Worker {
  userId    String     @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])

  trades    Trade[]

  reservations Reservation[]

  references Reference[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trade {
  id        String     @id @default(cuid())
  name      String
  workerId  String
  worker    Worker    @relation(fields: [workerId], references: [userId])

  yearsOfExperience Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  userId        String      @id @default(cuid())
  user             User      @relation(fields: [userId], references: [id])

  reservations Reservation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id          String    @id @default(cuid())
  startDate   DateTime
  endDate     DateTime
  workerId    String
  customerId  String

  worker      Worker    @relation(fields: [workerId], references: [userId])
  customer    Customer  @relation(fields: [customerId], references: [userId])

  description String
  status      String // reserved, rejected, createdOffer, acceptedOffer, rejectedOffer, completed

  price       Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reference {
  id          String    @id @default(cuid())
  workerId    String

  worker      Worker    @relation(fields: [workerId], references: [userId])

  description String
  image       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}